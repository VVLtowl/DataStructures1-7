ケース１：リスト
順次更新するため、中身要素を順に呼び出すことが必要なので、（配列、リスト、キュー、スタック）４つに絞る。
寿命管理するため、一回呼び出した後また使うので、キューとスタックを除いて、
パーティクルエフェクトの管理によって、削除挿入などの操作から対象の数が確定しにくいので、リストが適する。

ケース２：配列
ID をキーに、データを高速に取得したいため、リストとキューとスタックを除く。
IDは32bit 符号なし整数値であり、既知の範囲の連番であることによって、
特にIDをハッシュ化する必要がないので、ハッシュテーブルより、配列がもっと効率良い選択だを思う。

ケース３：ハッシュテーブル
ID をキーに、データを高速に取得したいため、リストとキューとスタックを除く。
IDは32bit 符号なし整数値であるが、IDはランダムな値であることによって、
IDから要素が見つけ出せるようにIDをハッシュ化する必要があり、しかも要素の数も確定ではないので、ハッシュテーブルが適する。

ケース４：キュー
順に順次実行するため、（配列、リスト、キュー、スタック）４つに絞る。
コマンドの数は最初に確定ではないため、配列を除く。
実行は一度きりであるため、リストを除く。
呼び出す順番は先に入った要素が先に出るので、キューが適する。

ケース５：スタック
順に要素を取り出すため、（配列、リスト、キュー、スタック）４つに絞る。
数式ないの数値と演算子の数が確定ではないため、配列を除く。
逆ポーランド記法であるため、
各要素が計算に一回使ったあと作用がなくなるので、リストを除く。
後に入れた要素を先に取り出すルールがあるので、スタックが適する。
